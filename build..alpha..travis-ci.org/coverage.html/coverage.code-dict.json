{"/home/travis/build/npmtest/node-npmtest-gulp-htmlone/test.js":"/* istanbul instrument in package npmtest_gulp_htmlone */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-htmlone/lib.npmtest_gulp_htmlone.js":"/* istanbul instrument in package npmtest_gulp_htmlone */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_htmlone = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_htmlone = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-htmlone/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-htmlone && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_htmlone */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_htmlone\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_htmlone.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_htmlone.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_htmlone.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_htmlone.__dirname + '/lib.npmtest_gulp_htmlone.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-htmlone/node_modules/gulp-htmlone/index.js":"var through = require('through2');\nvar gutil = require('gulp-util');\nvar path = require('path');\n\nvar cheerio = require('cheerio');\nvar uglify = require('uglify-js');\nvar cssmin = require('ycssmin').cssmin;\nvar fs = require('fs');\nvar fsutil = require('fsmore');\nvar url = require('url');\nvar http = require('http');\nvar coimport = require('coimport');\n\n\nvar PluginError = gutil.PluginError;\nvar pluginName = 'gulp-htmlone';\nvar TEMP_DIR = 'htmlone_temp';\nvar reg_http = /^(\\s+)?(http(s)?\\:)?\\/\\//;\nvar no_protocol = /^(\\s+)?\\/\\//;\nvar data_url = /^data:/;\nvar localParten = new RegExp('\\\\.\\/');\nvar linkHost = {\n    'online': '//g.alicdn.com/mtb/',\n    'daily': '//g-assets.daily.taobao.net/mtb/'\n}\n\nfunction extend(dest, source, isOverwrite) {\n    if (isOverwrite == undefined) isOverwrite = true;\n    for (var k in source) {\n        if (!(k in dest) || isOverwrite) {\n            dest[k] = source[k]\n        }\n    }\n    return dest;\n}\n\nvar __uniqueId = function() {\n    var i = 0;\n    return function() {\n        return i++;\n    }\n}();\n\n// js process\nvar JsProcessor = function($, options, cb) {\n    this.doneJs = 0;\n    this.isDone = false;\n    this.cb = cb;\n    this.options = options;\n    this.$js = $('script');\n    this.$ = $;\n\n    var js = this.$js;\n    var me = this;\n    var htmlpath = options.htmlpath;\n    var comboParten = new RegExp('\\\\?\\\\?');\n    var comboScriptEl;\n\n    if (js.length === 0) {\n        this.isDone = true;\n        this.cb && this.cb();\n    } else {\n        js.each(function(i, el) {\n            var $el = $(this);\n            var src = $(this).attr('src');\n            var type = $(this).attr('type');\n            var oldCon = $(this).html();\n            var newCon = '\\n';\n            var isKeeplive = $el.is(options.keepliveSelector);\n\n            if ((!type || type === 'text/javascript') && !!src) {\n                if (isKeeplive) {\n                    if(comboParten.test(src)) {\n                        comboScriptEl = el;\n                    }\n                    if (options.localError) {\n                        console.log('have local file');\n                    }else if(localParten.test(src)) {\n                        // 引用的本地路径，替换成日常链接或者combo\n                        var filename = getFileName(src);\n                        if (filename) {\n                            var fileSrc = getFilePath(options) + filename;\n                            if (!options.noAlicdn && options.publish && comboScriptEl) {\n                                // 删除当前script ,修改combo script src\n                                var comboSrc = $(comboScriptEl).attr('src') + ',' + fileSrc;\n                                $(comboScriptEl).attr('src',comboSrc);\n                                $el.remove();\n                            } else {\n                                var newSrc = options.domain +  fileSrc;\n                                $el.attr('src', newSrc);\n                            }\n                        }\n                    }\n                    me.__checkJsDone();\n                } else if (!reg_http.test(src)) {\n                    var jssrc = path.join(path.dirname(htmlpath), src);\n                    if (fs.lstatSync(jssrc).isFile()) {\n                        newCon += fs.readFileSync(jssrc, {\n                            encoding: 'utf8'\n                        });\n                        me.__minifyAndReplace($el, newCon);\n                        me.__checkJsDone();\n                    } else {\n                        console.log('\"' + src + '\" in \"' + htmlpath + '\" is an invalid file or url!');\n                    }\n                } else {\n                    //download & replace\n                    if (no_protocol.test(src)) src = 'http:' + src;\n                    if (/\\?\\?/.test(src)) {\n                        //cdn combo\n                        var destPath = path.join(TEMP_DIR, 'cdn_combo_' + __uniqueId() + '.js');\n                    } else {\n                        var destPath = path.join(TEMP_DIR, url.parse(src).pathname);\n                    }\n\n                    fsutil.download(src, destPath, function($js, destPath) {\n                        return function() {\n                            console.log('\"' + destPath + '\" downloaded!');\n                            me.__minifyAndReplace($el, fs.readFileSync(destPath, {\n                                encoding: 'utf8'\n                            }));\n                            me.__checkJsDone();\n                        }\n                    }($el, destPath));\n                }\n            } else {\n                me.__checkJsDone();\n            }\n\n        });\n    }\n};\nJsProcessor.prototype = {\n    __minifyAndReplace: function($el, jscon) {\n        if (this.options.jsminify) {\n            jscon = uglify.minify(jscon, {\n                fromString: true,\n                mangle: true\n            }).code.replace(/\\<\\/script\\>/g, '\\\\x3c/script>');\n        }\n\n        // do not use .html()\n        $el.empty().removeAttr('src');\n        var replaceStr = this.$.html($el).replace(/<\\/script>/i, '') + jscon + '</script>';\n        $el.replaceWith(replaceStr);\n    },\n    __checkJsDone: function() {\n        this.doneJs++;\n        if (this.doneJs === this.$js.length) {\n            this.isDone = true;\n            this.cb && this.cb();\n        }\n    }\n};\n\n\n// css processor\nvar CssProcessor = function($, options, cb) {\n    this._done = 0;\n    this.options = options;\n    this.cb = cb;\n\n    this.$ = $;\n    this.$css = $('link[rel=stylesheet]');\n    this.fixRelaPath = path.relative(options.destDir, './');\n\n    var css = this.$css;\n    var htmlpath = options.htmlpath;\n    var me = this;\n\n    if (css.length === 0) {\n        this.isDone = true;\n        this.cb && this.cb();\n    } else {\n        css.each(function(i, el) {\n            var href = $(this).attr('href');\n            var newCon = '\\n';\n            var $css = $(this);\n            var isKeeplive = $(this).is(options.keepliveSelector);\n\n            if (!isKeeplive) {\n                if (!reg_http.test(href)) {\n                    var csshref = path.join(path.dirname(htmlpath), href);\n                    if (fs.lstatSync(csshref).isFile()) {\n                        newCon += (fs.readFileSync(csshref, {\n                            encoding: 'utf8'\n                        }) + '\\n');\n                        var coimportFile = csshref + '.coimport';\n                        fs.writeFileSync(coimportFile, newCon, {\n                            encoding: 'utf8'\n                        });\n                        if (options.coimport) {\n                            //todo\n                            coimport(coimportFile, function($css, csshref, coimportFile) {\n                                return function(newStr) {\n                                    me.__cssMinifyAndReplace($css, csshref, newStr);\n                                    fsutil.rmdirSync(coimportFile);\n                                }\n                            }($css, csshref, coimportFile))\n                        } else {\n                            me.__cssMinifyAndReplace($css, csshref, newCon);\n                        }\n                    } else {\n                        console.log('\"' + href + '\" in \"' + htmlpath + '\" is an invalid file or url!');\n                    }\n                } else {\n                    if (no_protocol.test(href)) href = 'http:' + href;\n                    if (/\\?\\?/.test(href)) {\n                        //cdn combo\n                        var tempDestFile = path.join(TEMP_DIR, 'cdn_combo_' + __uniqueId() + '.css');\n                    } else {\n                        var tempDestFile = path.join(TEMP_DIR, url.parse(href).pathname);\n                    }\n\n                    fsutil.download(href, tempDestFile, function($css, tempDestFile) {\n                        return function() {\n                            console.log('\"' + tempDestFile + '\" downloaded!');\n                            var cssStr = fs.readFileSync(tempDestFile, {\n                                encoding: 'utf8'\n                            });\n                            cssStr = me.fixAssetsPath(href, cssStr);\n                            var coimportFile = tempDestFile + '.coimport';\n                            fs.writeFileSync(coimportFile, cssStr, {\n                                encoding: 'utf8'\n                            });\n\n                            if (options.coimport) {\n                                coimport(coimportFile, function($css, csshref) {\n                                    return function(newStr) {\n                                        me.__cssMinifyAndReplace($css, csshref, newStr);\n                                    }\n                                }($css, href))\n\n                            } else {\n                                me.__cssMinifyAndReplace($css, href, cssStr);\n                            }\n                        }\n                    }($css, tempDestFile));\n                }\n            } else {\n                me._done++;\n                me._checkCssDone();\n            }\n\n        });\n    }\n};\nCssProcessor.prototype = {\n    _checkCssDone: function() {\n        if (this._done === this.$css.length) {\n            this.isDone = true;\n            this.cb && this.cb();\n        }\n    },\n    __cssMinifyAndReplace: function($css, sourcePath, cssCon) {\n        var $ = this.$;\n        var me = this;\n        if (this.options.cssminify) {\n            cssCon = cssmin(cssCon);\n        }\n        cssCon = me.fixAssetsPath(sourcePath, cssCon);\n        var style = $('<style>' + cssCon + '</style>');\n        $css.replaceWith(style);\n        this._done++;\n        this._checkCssDone();\n    },\n    fixAssetsPath: function(sourcePath, cssStr) {\n        var con = this.uniform(cssStr);\n        if (reg_http.test(sourcePath)) con = this.rela2abs(sourcePath, con);\n\n        var dirname = path.dirname(this.options.htmlpath);\n        var b = sourcePath;\n        var me = this;\n\n        // fix relative path or `url`\n        con = con.replace(/url\\(\\s*([\\S^\\)]+)\\s*\\)/g, function(c, d) {\n            //if (no_protocol.test(d)) d = 'http:' + d;\n            if (reg_http.test(d) || data_url.test(d)) return c;\n\n            console.log(d, c);\n\n            var file_dirname = path.dirname(path.resolve(dirname, b));\n            var assetpath = path.resolve(file_dirname, d);\n            assetpath = path.relative(dirname, assetpath);\n            if (!reg_http.test(assetpath)) {\n                assetpath = path.join(me.fixRelaPath, assetpath);\n            }\n            //console.log(d, assetpath);\n            return 'url(' + assetpath + ')';\n        });\n        // fix relative path of `import string`\n        con = con.replace(/@import\\s*\"([^\"]+)\"\\s*;/g, function(e, f) {\n            //if (no_protocol.test(f)) f = 'http:' + f;\n            if (reg_http.test(f) || data_url.test(f)) return e;\n            var file_dirname = path.dirname(path.resolve(dirname, b));\n            var assetpath = path.resolve(file_dirname, f);\n            assetpath = path.relative(dirname, assetpath);\n            if (!reg_http.test(assetpath)) {\n                assetpath = path.join(me.fixRelaPath, assetpath);\n            }\n            return '@import \"' + assetpath + '\";';\n        });\n        return con;\n    },\n    // 当源css是url时，css中 相对路径先替换为绝对的 \n    // 处理不了多个css combo 的情况\n    rela2abs: function(uri, cssStr) {\n        if (no_protocol.test(uri)) uri = 'http:' + uri;\n        var con = cssStr.replace(/url\\(\\s*([\\S^\\)]+)\\s*\\)/g, function(c, d) {\n            if (!reg_http.test(d) && !data_url.test(d)) {\n                var uo = url.parse(uri);\n                var newPath = path.join(path.dirname(uo.pathname), d);\n                newPath = 'http://' + uo.hostname + newPath;\n                return 'url(' + newPath + ')';\n            } else {\n                return c;\n            }\n        });\n\n        return con;\n    },\n    uniform: function(css) {\n        // uniform @import\n        css = css\n            .replace(/@import\\s+url\\(\\s*\"([^\"]+)\"\\s*\\)\\s*;/g, '@import \"$1\";')\n            .replace(/@import\\s+url\\(\\s*\\'([^\\']+)\\'\\s*\\)\\s*;/g, '@import \"$1\";')\n            .replace(/@import\\s+url\\(\\s*([\\S^\\)]+)\\s*\\)\\s*;/g, '@import \"$1\";')\n            .replace(/@import\\s*\"([^\"]+)\"\\s*;/g, '@import \"$1\";')\n            .replace(/@import\\s*\\'([^\\']+)\\'\\s*;/g, '@import \"$1\";');\n\n        // uniform url()\n        css = css\n            .replace(/url\\(\\s*\"([^\"]+)\"\\s*\\)/g, 'url($1)')\n            .replace(/url\\(\\s*\\'([^\\']+)\\'\\s*\\)/g, 'url($1)')\n            .replace(/url\\(\\s*([\\S^\\)]+)\\s*\\)/g, 'url($1)');\n\n        return css;\n    }\n};\n\nvar dealScripts = function(htmlpath, htmlFrag, options, cb) {\n\n    //console.log(htmlFrag, options);\n    var $ = cheerio.load(htmlFrag, {\n        decodeEntities: false,\n        normalizeWhitespace: false\n    });\n    if (options.removeSelector) {\n        $(options.removeSelector).remove();\n    }\n    options.htmlpath = htmlpath;\n\n    // deal js\n    var todownloadCss = 0;\n    var downloadedCss = 0;\n    var isJsDone = false;\n    var isCssDone = false;\n\n    var __checkAllDone = function() {\n        if (isJsDone && isCssDone) {\n            cb && cb($.html());\n        }\n    };\n\n\n    var jser = new JsProcessor($, options, function() {\n        isJsDone = true;\n        __checkAllDone();\n    });\n\n    // deal css\n    var csser = new CssProcessor($, options, function() {\n        isCssDone = true;\n        __checkAllDone();\n    })\n\n};\n\nfunction getFileName(src) {\n    var name = src.match(/(build|dest|dist)\\/(.*)/);\n    if(name && name[2]){\n        name = name[2];\n        name = name.replace(/\\.debug/g,'').replace(/\"/,'');\n    } else {\n        // 如果不在生成的目录，则直接取最终文件名\n        name = src.match(/[^\\/]*\\.js$/);\n        if (name && name[0]) {\n            name = name[0];\n        }\n    }\n    name = name || '';\n    return name;\n}\n\nfunction getFilePath(options) {\n    var path = '';\n    if (!options.noAlicdn) {\n        path = options.appName + '/' + options.appVersion + '/';\n    }\n    return path;\n}\n\nvar dealOtherLocalPath = function(str,options) {\n    // deal local path\n    str = str.replace(/\"(\\.+\\/.*\\.js)\"/g,function(a,b){\n        var filename = getFileName(b);\n        var filePath = getFilePath(options);\n        if (options.localError) {\n            console.log('have local file');\n        } else {\n            a = a.replace(b, options.domain + filePath + filename);\n        }\n        return a;\n    });\n    return str;\n}\n\nprocess.on('exit', function(code) {\n  // clean before exit\n  fsutil.rmdirSync('./' + TEMP_DIR + '/');\n});\n\nmodule.exports = function(opt) {\n\n    var options = extend({\n        removeSelector: '[will-remove]',\n        keepliveSelector: '[keeplive]',\n        destDir: './',\n        coimport: true,\n        cssminify: true,\n        jsminify: true,\n        noAlicdn: false\n    }, (opt || {}));\n    options.domain = options.publish ? linkHost.online : linkHost.daily;\n    options.localError = false;\n    if (options.noAlicdn) {\n        options.domain = options.publish ? options.onlinePath : options.dailyPath;\n        if (!options.domain) {\n            options.localError = true;\n        }\n    } else {\n        if (!options.appName || !options.appVersion) {\n            options.localError = true;\n        }\n    }\n    var _todo = 0;\n    var _done = 0;\n\n    function transform(file, enc, cb) {\n        if (file.isNull()) return cb(null, file);\n        if (file.isStream()) return cb(new PluginError(pluginName, 'Streaming not supported'));\n\n        var data;\n        var str = file.contents.toString('utf8');\n        var filepath = file.path;\n\n        _todo++;\n        dealScripts(filepath, str, options, function(html) {\n            var html = dealOtherLocalPath(html,options);\n            file.contents = new Buffer(html);\n            cb(null, file);\n\n            _done++;\n            if (_done === _todo) {                \n                gutil.log(gutil.colors.cyan('>> All html done!'));\n            }\n        });\n    }\n\n    return through.obj(transform);\n}"}